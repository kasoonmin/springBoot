package com.springboot.goods.controller;

import java.io.File;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.springboot.goods.service.GoodsService;
import com.springboot.goods.vo.GoodsVO;
import com.springboot.goods.vo.lodgingdetailVO;
import com.springboot.member.vo.MemberVO;

@Controller("goodsController")

public class GoodsControllerImpl implements GoodsController {
	private static final String ARTICLE_IMAGE_REPO = "C:\\goods\\goods_image";
	@Autowired
	private GoodsService goodsService;
	@Autowired
	private GoodsVO goodsVO;
	private lodgingdetailVO lodgingdetailVO;

	public GoodsControllerImpl() {

	}

	// 상품 등록 페이지 이동
	@RequestMapping(value = "/goods/goodsWrite.do", method = { RequestMethod.GET, RequestMethod.POST })
	public ModelAndView goodsWrite(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String viewName = (String) request.getAttribute("viewName");
		ModelAndView mav = new ModelAndView(viewName);
		System.out.println(viewName);
		return mav;
	} // end

//	// 상품 등록
//	@Override
//	@RequestMapping(value = "/goods/goodsWrite1.do", method = { RequestMethod.GET, RequestMethod.POST })
//	public ModelAndView goodsWrite(GoodsVO goods, lodgingdetailVO lodging, HttpServletRequest request,
//			HttpServletResponse response) throws Exception {
//		request.setCharacterEncoding("utf-8");
//
//		int result = 0;
//		int result1 = 0;
//		result = goodsService.goodsWrite(goods);
//		result1 = goodsService.lodgingdetail(lodging);
//		ModelAndView mav = new ModelAndView("redirect:/page/mainPage.do");
//		mav.addObject("result1", result1);
//		mav.addObject("result", result);
//		return mav;
//	}

	@Override
	@RequestMapping(value = "/goods/goodsWrite1.do", method = { RequestMethod.GET, RequestMethod.POST })
	public ResponseEntity goodsWrite(GoodsVO goods, lodgingdetailVO lodging,
			MultipartHttpServletRequest multipartRequest, HttpServletResponse response) throws Exception {
		multipartRequest.setCharacterEncoding("utf-8");

		Map<String, Object> goodsMap = new HashMap<String, Object>();
		Enumeration enu = multipartRequest.getParameterNames();
		while (enu.hasMoreElements()) {
			String name = (String) enu.nextElement();
			String value = multipartRequest.getParameter(name);
			goodsMap.put(name, value);
		}


		String imageFileName = upload(multipartRequest);
		HttpSession session = multipartRequest.getSession();
		MemberVO memberVO = (MemberVO) session.getAttribute("member");
		System.out.println("1");
		int uid = memberVO.getUid();
		System.out.println("uid :" + uid);
		goodsMap.put("uid", uid);
		goodsMap.put("imageFileName", imageFileName);
		String message;
		ResponseEntity resEnt = null;
		HttpHeaders responseHeaders = new HttpHeaders();
		responseHeaders.add("Content-Type", "text/html; charset=utf-8");
		try {
			int goodsId = goodsService.goodsWrite(goodsMap);
			int result1 = 0;
			result1 = goodsService.lodgingdetail(lodging);
			if (imageFileName != null && imageFileName.length() != 0) {
				File srcFile = new File(ARTICLE_IMAGE_REPO + "\\" + "temp" + "\\" + imageFileName);
				File destDir = new File(ARTICLE_IMAGE_REPO + "\\" + goodsId);
				FileUtils.moveFileToDirectory(srcFile, destDir, true);
			}
			message = "<script>";
			message += "alert('새글을 추가했습니다.');";
			message += "location.href='" + multipartRequest.getContextPath() + "/page/mainPage.do';";
			message += "</script>";
			resEnt = new ResponseEntity(message, responseHeaders, HttpStatus.CREATED);
		} catch (Exception e) {
			File srcFile = new File(ARTICLE_IMAGE_REPO + "\\" + "temp" + "\\" + imageFileName);
			srcFile.delete();

			message = "<script>";
			message += "alert('오류가 발생했습니다. 다시 시도해주세요.');";
			message += " location.href='" + multipartRequest.getContextPath() + "/goods/goodsWrite.do';";
			message += "</script>";
			resEnt = new ResponseEntity(message, responseHeaders, HttpStatus.CREATED);
			e.printStackTrace();
		}
		return resEnt;
	}

	private String upload(MultipartHttpServletRequest multipartRequest) throws Exception {
		String imageFileName = null;
		Iterator<String> fileNames = multipartRequest.getFileNames();

		while (fileNames.hasNext()) {
			String fileName = fileNames.next();
			MultipartFile mFile = multipartRequest.getFile(fileName);
			imageFileName = mFile.getOriginalFilename();
			File file = new File(ARTICLE_IMAGE_REPO + "\\" + "temp" + "\\" + fileName);
			if (mFile.getSize() != 0) {// File Null Check
				if (!file.exists()) {
					file.getParentFile().mkdirs();
					mFile.transferTo(new File(ARTICLE_IMAGE_REPO + "\\" + "temp" + "\\" + imageFileName));
				}
			}
		}
		return imageFileName;
	}
}
